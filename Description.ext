//https://community.bistudio.com/wiki/Description.ext

author="Sniper Party / Caranfin";
briefingName = "CO10-46 Grace Under Pressure";

//Overview text and picture for the mission list (admin sees when selecting missions, also shown when slotting in)
overviewText = "Evacuating an outpost under escalating enemy assault."; //This is overwritten by the editor-set description
//overviewPicture = "LoadScreen.paa"; This does not work on dedicated servers. Arma is bad.

//Loading screen texts and picture for loading the mission
OnLoadName = "CO10-46 Grace Under Pressure";
OnLoadMission = "An organized withdrawal is a recognized military maneuver. So is a chaotic retreat.";
loadscreen = "files\pictures\loadscreen.paa";

saving = 0; //Set saving to 0 so that you can exit the mission without saving and causing dumb bugs when reloading
disabledai = 1; //Disable AI taking over un-taken player slots

//Default respawn options
respawn = "BASE";
respawnDelay = 10;
respawnDialog = 0;
respawnOnStart = 0;
respawnTemplates[] = {"Tickets","Spectator","Counter"};
respawnButton = 0;

ReviveMode = 1;                         //0: disabled, 1: enabled, 2: controlled by player attributes
ReviveUnconsciousStateMode = 0;         //0: basic, 1: advanced, 2: realistic
ReviveRequiredTrait = 0;                //0: none, 1: medic trait is required
ReviveRequiredItems = 2;                //0: none, 1: medkit, 2: medkit or first aid kit
ReviveRequiredItemsFakConsumed = 1;     //0: first aid kit is not consumed upon revive, 1: first aid kit is consumed
ReviveDelay = 6;                        //time needed to revive someone (in secs)
ReviveMedicSpeedMultiplier = 2;         //speed multiplier for revive performed by medic
ReviveForceRespawnDelay = 3;            //time needed to perform force respawn (in secs)
ReviveBleedOutDelay = 120;              //unconscious state duration (in secs)


//Game type stuff. Doesn't matter, but will get shown in mission select.
class Header
{
	gameType = COOP;
	minPlayers = 10;
	maxPlayers = 46;
};

corpseManagerMode = 3;
corpseLimit = 100;
corpseRemovalMinTime = 60;
corpseRemovalMaxTime = 3600;
wreckManagerMode = 1;
wreckLimit = 10;
wreckRemovalMinTime = 60;
wreckRemovalMaxTime = 3600;
minPlayerDistance = 100;

class ACE_Settings
{
	#include "aceSettings.hpp"
};

//Mission ending states, used via BIS_fnc_endMission from end.sqf
class CfgDebriefing
{
	class WinTotal
	{
		title = "Complete Success";
		subtitle = "All equipment saved";
		picture = "\A3\ui_f\data\map\mapcontrol\taskIconDone_ca.paa";
		picturecolor[] = {0.0,0.3,0.6,1};
	};

	class WinPartial
	{
		title = "Mission Successful";
		subtitle = "The enemy got nothing";
		picture = "\A3\ui_f\data\map\mapcontrol\taskIconDone_ca.paa";
		picturecolor[] = {0.0,0.3,0.6,1};
	};

	class LossAmount
	{
		title = "Mission Failed";
		subtitle = "Not enough gear was saved";
		picture = "\A3\ui_f\data\map\mapcontrol\taskIconFailed_ca.paa";
		pictureColor[] = {1.0,0.3,0.2,1.0};
	};

	class LosePartial
	{
		title = "Mission Failed";
		subtitle = "The enemy has gained important gear";
		picture = "\A3\ui_f\data\map\mapcontrol\taskIconFailed_ca.paa";
		pictureColor[] = {1.0,0.3,0.2,1.0};
	};

	class LoseTotal
	{
		title = "Complete Failure";
		subtitle = "The enemy has gained a significant amount of gear";
		picture = "\A3\ui_f\data\map\mapcontrol\taskIconFailed_ca.paa";
		pictureColor[] = {1.0,0.3,0.2,1.0};
	};

};

//Functions, used to define preSet.sqf as "preInit". You can also make your own functions, but that's generally not needed.
//More information on defining your own functions: https://community.bistudio.com/wiki/Functions_Library_%28Arma_3%29#Adding_a_Function
class CfgFunctions
{
	class ARTR
	{
		class ai
		{
			class enemyAttack {};
			class getAIController {};
			class HCInit {};
			class HCSetOwner { postInit = 1; };
			class infantryGroup {};
			class initSkills { preInit = 1; };
			class randomSuppression { postInit = 1; };
			class setSkills {};
			class suppressPositions {};
			class VBIED {};
			class vehicleGroup {};
		};

		class cargo
		{
			class fillCargo {};
			class initCargo { postInit = 1; };
		};

		class eden
		{
			class setConditions {};
			class setIrregularGearEden {};
		};

		class effects
		{
			class mortarFire {};
		};

		class gear
		{
			class giveMagazines {};
			class modGear {};
			class modVehicles { postInit = 1; };
			class switchVehicle {};
			class selectGear { preInit = 1; };
			class switchBackpack {};
			class switchHandgun {};
			class switchPrimaryWeapon {};
			class switchSecondaryWeapon {};
			class switchUniform {};
			class switchVest {};
		};

		class irregulars
		{
			class getIrregularClothes {};
			class getIrregularThing {};
			class irregularClothSets {};
			class irregularCollections {};
			class irregularGearSets { preInit = 1; };
			class setIrregularClothes {};
			class setIrregularGear {};
		};

		class missionLogic
		{
			class briefingFile {};
			class clientEnding {};
			class emptyTrigger {};
			class handleQueue {};
			class handleWave {};
			class initBriefing { postInit = 1; };
			class JIPSetup { preInit = 1; };
			class respawnHelicopters {};
			class respawnPlayers {};
			class serverEnding {};
			class spawnWave { postInit = 1; };
		};

		class mods
		{
			class checkMod {};
			class initRevive { preInit = 1; };
			class initASR { preInit = 1; };
			class initTFAR { preInit = 1; };
			class initACRE { preInit = 1; };
			class TFARRadiosAdded {};
			class TFARSpeaking {};
			class TFARVolumeChange {};
		};

		class preinit
		{
			class missionSettings { preInit = 1; };
			class randInt {};
			class populateArray {};
			class chooseRandoms {};
			class presenceArray {};
		};
	};
};

class CfgRemoteExec
{
	// List of script functions allowed to be sent from client via remoteExec
	class Functions
	{
	       mode = 2;					//0: off, 1: on with whitelist, 2: on ignoring whitelist
	       jip = 1;		 				// Ability to send JIP messages: 0-disabled, 1-enabled (default)

	       class clientEnding
	       {
			   allowedTargets=0; 	// 0: can target anyone, 1: only clients, 2: only server
			   jip = 1; 				// JIP setting override
	       };

		   class infantryGroup
		   {
			   allowedTargets = 0;
			   jip = 0;
		   };

		   class vehicleGroup
		   {
			   allowedTargets = 0;
			   jip = 0;
		   };
	};

	// List of script commands allowed to be sent from client via remoteExec
	class Commands
	{
		class reveal { allowedTargets=0; jip=0; };
	};
};

//Parameters, accessible from the role selection screen and used to switch between pre-defined options for the mission (time of day, gear, headless client). Parameters are in an array called paramsArray.
//So, to check, refer to paramsArray select i, where i is array index (starting with 0)
class Params
{
	/*
	#define DEBUGCONSOLE_DEFAULT 1
	#include "\a3\functions_f\Params\paramDebugConsole.hpp"

	#define DAYTIMEHOUR_DEFAULT 12
	#include "\a3\functions_f\Params\paramDaytimeHour.hpp"

	#define WEATHER_DEFAULT 50
	#include "\a3\functions_f\Params\paramWeather.hpp"
	*/

	class GearPreference {
		title = "Gear Preference (Required mods listed)";
		values[] = {0,1,2,3};
		texts[] = {"NATO (Standard ARMA)","US Army [RHS USAF]","British Army [3CB BAF]","Russian army [RHS AFRF]"};
		default = 2;
	};

	class StaticPreference {
		title = "If available, give 3CB static weapons regardless of gear preference";
		values[] = {0,1};
		texts[] = { "False", "True" };
		default = 1;
	};

	class RespawnSetting {
		title = "Reinforcement preference";
		values[] = {0,1,2,3};
		texts[] = {"None","Helicopters only","Infantry only","Everyone"};
		default = 3;
	};
};

//Notifications (the popups you get when completing a task and so on), can be used via BIS_fnc_showNotification
class CfgNotifications
{

	class TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskAssigned_0";
		iconPicture = "\A3\ui_f\data\map\mapcontrol\taskIcon_ca.paa";
		description = "%1";
		priority = 5;
		sound = "taskAssigned";
	};
	class TaskCreated: TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskCreated_0";
		iconPicture = "\A3\ui_f\data\map\mapcontrol\taskIconCreated_ca.paa";
		description = "%1";
		priority = 5;
		sound = "taskCreated";
	};
	class TaskSucceeded: TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskSucceeded_0";
		iconPicture = "\A3\ui_f\data\map\mapcontrol\taskIconDone_ca.paa";
		description = "%1";
		priority = 6;
		color[] = {0.7,1.0,0.3,1.0};
		sound = "taskSucceeded";
	};
	class TaskFailed: TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskFailed_0";
		iconPicture = "\A3\ui_f\data\map\mapcontrol\taskIconFailed_ca.paa";
		description = "%1";
		priority = 6;
		color[] = {1.0,0.3,0.2,1.0};
		sound = "taskFailed";
	};
	class TaskCanceled: TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskCanceled_0";
		iconPicture = "\A3\ui_f\data\map\mapcontrol\taskIconCanceled_ca.paa";
		description = "%1";
		priority = 6;
		color[] = {0.7,0.7,0.7,1.0};
		sound = "taskCanceled";
	};
	class TaskUpdated: TaskAssigned
	{
		title = "$STR_A3_CfgNotifications_TaskUpdated_0";
		description = "%1";
		priority = 4;
		sound = "taskUpdated";
	};
};

class CfgAISkills
{
	aimingAccuracy[] = {1, 1, 1, 1};
	aimingShake[] = {1, 1, 1, 1};
	aimingSpeed[] = {1, 1, 1, 1};
	commanding[] = {1, 1, 1, 1};
	courage[] = {1, 1, 1, 1};
	endurance[] = {1, 1, 1, 1};
	general[] = {1, 1, 1, 1};
	reloadSpeed[] = {1, 1, 1, 1};
	spotDistance[] = {1, 1, 1, 1};
	spotTime[] = {1, 1, 1, 1};
};
